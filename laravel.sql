-- phpMyAdmin SQL Dump
-- version 4.7.4
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Feb 03, 2018 at 06:51 AM
-- Server version: 5.7.20
-- PHP Version: 7.1.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `laravel`
--

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`, `created_at`, `updated_at`) VALUES
(1, 'Technology', '2018-02-01 19:25:03', '2018-02-01 19:25:03'),
(3, 'gnjfgurhnjb', '2018-02-03 05:50:34', '2018-02-03 05:50:34'),
(4, 'bvnkuiy', '2018-02-03 05:51:55', '2018-02-03 05:51:55');

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE `comments` (
  `id` int(10) UNSIGNED NOT NULL,
  `post_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `body` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `contacts`
--

CREATE TABLE `contacts` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `body` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(7, '2014_10_12_000000_create_users_table', 1),
(8, '2014_10_12_100000_create_password_resets_table', 1),
(9, '2018_01_26_141832_create_posts_table', 1),
(10, '2018_01_26_141855_create_comments_table', 1),
(11, '2018_01_26_141918_create_categories_table', 1),
(12, '2018_01_26_192314_entrust_setup_tables', 1),
(13, '2018_02_01_195826_contacts_table', 1);

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `permissions`
--

CREATE TABLE `permissions` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `permission_role`
--

CREATE TABLE `permission_role` (
  `permission_id` int(10) UNSIGNED NOT NULL,
  `role_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(10) UNSIGNED NOT NULL,
  `user_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `body` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `approved` tinyint(4) NOT NULL DEFAULT '0',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `user_id`, `category_id`, `title`, `body`, `approved`, `created_at`, `updated_at`) VALUES
(1, 1, 3, 'Our Ambitious Plan to Make Insecure PHP Software a Thing of the Past', '<div class=\"blog-post-body\">\r\n<p>Last month we published our <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software\">guide to building secure PHP software in 2018</a>. It provides clear and accessible guidance to writing secure PHP software. If you\'re a web developer, that page should serve as a great starting point for writing secure software going forward.</p>\r\n<p><strong>However, that guide only solves half the problem.</strong></p>\r\n<p>The other half is the abundance of outdated blog posts and PHP tutorials littered across the Internet that demonstrate bad security practices. And we\'ll need your help (yes, yours!) to clean up the ecosystem.</p>\r\n<span id=\"after-fold\"></span>\r\n<h2>Let\'s Solve Application Security at an Ecosystem Level</h2>\r\n<p>Many of you are familiar with <a href=\"https://meta.stackoverflow.com/questions/293930/problematic-php-cryptography-advice-in-popular-questions\">our efforts to clean up the bad/questionable cryptography practices on popular Stack Overflow answers</a> over the years. It was challenging, at first, to launch this initiative because of how Stack Exchange websites work:</p>\r\n<ul>\r\n<li>You need reputation to get started</li>\r\n<li>You cannot post alternative answers that demonstrate an existing answer until you clear a reputation milestone</li>\r\n<li>Peer review is stilted against \"changing the intent\" of an existing answer (no matter how foolhardy the original intent may be)</li>\r\n</ul>\r\n<p>Despite these challenges, thanks to the immeasurable support of the StackOverflow moderators and ecosystem-conscious community members, we have been largely successful. These days, if you type \"php encryption\" into your favorite search engine, the top search results steer developers towards <a href=\"https://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken\">AEAD</a>.</p>\r\n<p>However, there are thousands of old blog posts and tutorial websites that compete with now-secure StackOverflow answers to the sorts of questions that developers seek answers to. Updating Stack Exchange websites and Wiki articles has a positive effect on the likelihood of developers being exposed to good security practices out of the gate, but it isn\'t enough.</p>\r\n<p>That is why, today, I\'m calling on the entire PHP community to organize an ecosystem clean-up initiative.</p>\r\n<h2 id=\"action-item\">What We Need You to Do</h2>\r\n<p>The task is simple at its face:</p>\r\n<p><strong>Log into your old blogs and/or websites, update your old tutorials to steer newcomers toward secure solutions. Then encourage your friends and peers to do the same.</strong></p>\r\n<p>This may entail one or more of the following:</p>\r\n<ul>\r\n<li>Prefacing the entire post with a big disclaimer.</li>\r\n<li>Linking users to a better guide that follows security best practices. This can be an updated blog post on your own website, or one of ours. (<a href=\"https://paragonie.com/blog/2018/01/our-ambitious-plan-make-insecure-php-software-thing-past#our-promise\">See below</a>.)</li>\r\n<li>Rewriting example code to demonstrate better security practices, if you\'d rather not link to an off-site blog post.</li>\r\n<li>Commenting out the contents of the old blog post to prevent copy-and-paste-driven developers from following outdated or insecure practices, in case they miss the disclaimers and you don\'t have the time/energy to rewrite it.</li>\r\n</ul>\r\n<p>At a minimum, it should eradicate all of the following:</p>\r\n<ul>\r\n<li>Trivial SQL Injection vulnerabilities if anyone copies and pastes your code.</li>\r\n<li>Trivial Cross-Site Scripting vulnerabilities if anyone copies and pastes your code.</li>\r\n<li>Plaintext password storage.</li>\r\n<li>Use of insecure password storage mechanisms, such as MD5.</li>\r\n<li>Unnecessary/insecure use of <code>unserialize()</code>.</li>\r\n</ul>\r\n<p>If you\'re unsure why, we <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software\">wrote at length</a> about all of these topics before.</p>\r\n<h3>Why Crowdsource this Effort?</h3>\r\n<p>No matter how driven and resourceful we may be, there\'s only so much impact we can have on the PHP ecosystem alone.</p>\r\n<p>However, if the entire PHP community can rally behind this effort, we can raze the mountains of collective technical debt that have accumulated over the past decade. We can make application security the norm, not something scary that only the elite few can master.</p>\r\n<p>Additionally, the prestige of the PHP developers will increase immensely. The toxic elements of the broader technology community will be <strong><em>totally disarmed</em></strong> the next time they try to dunk on PHP, which I think is an admirable goal to work towards.</p>\r\n<h3>What\'s Your Part in All This?</h3>\r\n<p>We\'ll keep doing what we\'ve already been doing for years, just in greater quantities.</p>\r\n<p>Now that <a href=\"https://dev.to/paragonie/php-72-the-first-programming-language-to-add-modern-cryptography-to-its-standard-library\">the Sodium cryptography extension has landed in PHP 7.2</a>, our next target is <a href=\"https://github.com/paragonie/paseto\">replacing the dangerous JOSE standards</a> with a less error-prone cryptographic standard. More announcements to come, soon.</p>\r\n<h2 id=\"our-promise\">Our Promise to the PHP Community</h2>\r\n<p>Whether or not your choose to link to our blog posts so newcomers will find them easier, we\'ve always conducted ourselves in accordance with these standards, and will continue to do so for as long as our doors remain open:</p>\r\n<ol>\r\n<li><strong>We will always aspire for excellence in usable security and applied cryptography.</strong></li>\r\n<li><strong>We will go out of our way to correct mistakes.</strong></li>\r\n<li><strong>We will never do any of the following</strong> (and, trust me, we get asked <em>a lot</em>):\r\n<ul>\r\n<li>Third-party banner ads and/or pop-up ads</li>\r\n<li>Intentionally enabling adware and/or malvertising</li>\r\n<li>Native advertising</li>\r\n<li>Paid product endorsements</li>\r\n<li>Guest posts that do any of the above</li>\r\n<li>Paywall our blog contents</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<p>Our company has been around for about three years, as of this writing. We aren\'t going away any time soon.</p>\r\n<p>If you are hesitant to trust us as a resource to recommend to newcomers, we invite you to read <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software\">our PHP security guide</a> (including the supplementary material it links to), review <a href=\"https://github.com/paragonie\">some of our open source libraries</a>, and ask some PHP and infosec community members what they think of Paragon Initiative Enterprises and the work we\'ve done for both communities.</p>\r\n</div>', 1, '2018-02-02 04:52:06', '2018-02-03 11:34:58');
INSERT INTO `posts` (`id`, `user_id`, `category_id`, `title`, `body`, `approved`, `created_at`, `updated_at`) VALUES
(2, 1, 1, 'The 2018 Guide to Building Secure PHP Software', '<p><img src=\"https://paragonie.com/files/blog/php-security-2018.png\" alt=\"\" width=\"720\" height=\"294\" /></p>\r\n<p>As the year 2018 approaches, technologists in general&mdash;and web developers in particular&mdash;must discard many of their old practices and beliefs about developing secure PHP applications. This is especially true for anyone who does not believe such a feat is even possible.</p>\r\n<p>This guide should serve as a complement to the e-book, <a href=\"http://www.phptherightway.com\">PHP: The Right Way</a>, with a strong emphasis on security and not general PHP programmer topics (e.g. code style).</p>\r\n<p><span id=\"after-fold\"></span></p>\r\n<h1>Table of Contents</h1>\r\n<ol>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#php-versions\">PHP Versions</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#dependency-management\">Dependency Management with Composer</a>\r\n<ul>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#composer-addons\">Recommended Packages</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#browser-security\">HTTPS and Browser Security</a>\r\n<ul>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#security-headers\">Security Headers</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#subresource-integrity\">Subresource Integrity</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#rel-attribute\">Document Relationships</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php\">Developing Secure PHP Software</a>\r\n<ul>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-databases\">Database Interaction</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-files\">File Uploads</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-xss\">Cross-Site Scripting (XSS)</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-csrf\">Cross-Site Request Forgery (CSRF)</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-xml\">XML attacks (XXE, XPath Injection)</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-serialization\">Deserialization and PHP Object Injection</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-passwords\">Password Hashing</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-php-cryptography\">General-Purpose Cryptography</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-random-numbers\">Randomness</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-server-side-https\">Server-Side HTTPS Requests</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#things-to-avoid\">Things to Avoid</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#special-security\">Specialized Use-Cases</a>\r\n<ul>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#searchable-encryption\">Searchable Encryption</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#split-tokens\">Token-based Authentication without Side-Channels</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-api-sapient\">Developing Secure APIs</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#chronicle-security-event-logging\">Security Event Logging with Chronicle</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#word-from-author\">A Word From the Author</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#resources\">Resources</a></li>\r\n<li><a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#translations\">Translations of this Article</a></li>\r\n</ol>\r\n<h1 id=\"php-versions\">PHP Versions</h1>\r\n<blockquote>\r\n<p>In short: Unless you can\'t help it, you want to be running <strong>PHP 7.2</strong> in the year 2018, and plan to switch to 7.3 in early 2019.</p>\r\n</blockquote>\r\n<p>PHP 7.2 was released on November 30, 2017.</p>\r\n<p>As of this writing, only PHP 7.1 and 7.2 receive active support by the developers of the PHP programming language, while PHP 5.6 and 7.0 both receive security patches for approximately another year.</p>\r\n<p>Some operating systems provide long-term support for otherwise unsupported versions of PHP, but this practice is generally considered harmful. In particular, their bad habit of backporting security patches without incrementing version numbers makes it hard to reason about the security of a system given only its PHP version.</p>\r\n<p>Consequently, regardless of what promises another vendor makes, you should always strive to <a href=\"http://php.net/supported-versions.php\">run only <strong>actively supported</strong></a> of PHP at any given time, if you can help it. That way, even if you end up on a security-only version for a while, a consistent effort to upgrade will keep your life free of unpleasant surprises.</p>\r\n<h1 id=\"dependency-management\">Dependency Management</h1>\r\n<blockquote>\r\n<p>In short: Use Composer.</p>\r\n</blockquote>\r\n<p>The state-of-the-art dependency management solution for the PHP ecosystem is <a href=\"https://getcomposer.org\">Composer</a>. <em>PHP: The Right Way</em> has an entire section dedicated to <a href=\"http://www.phptherightway.com/#dependency_management\">getting started with Composer</a> which we highly recommend.</p>\r\n<p>If you aren\'t using Composer to manage your dependencies, you will eventually (hopefully later but most likely sooner) end up in a situation where one of the software libraries you depend on becomes severely outdated, and then an exploit for a vulnerability in older versions starts circulating among computer criminals.</p>\r\n<p><strong>Important</strong>: Always remember to <a href=\"http://www.phptherightway.com/#updating-your-dependencies\">keep your dependencies updated</a> as you develop software. Fortunately, this is a one-liner:</p>\r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-title\">composer</span> update</code></pre>\r\n<p>If you\'re doing something particularly specialized that requires using PHP extensions (which are written in C), you cannot install them with Composer. You will also need PECL.</p>\r\n<h2 id=\"composer-addons\">Recommended Packages</h2>\r\n<p>Regardless of what you\'re building, you will almost certainly benefit from these dependencies. This is in addition to what most PHP developers recommend (PHPUnit, PHP-CS-Fixer, etc.).</p>\r\n<h3 id=\"roave-security-advisories\">roave/security-advisories</h3>\r\n<p><a href=\"https://github.com/Roave/SecurityAdvisories\">Roave\'s security-advisories</a> package uses the <a href=\"https://github.com/FriendsOfPHP/security-advisories\">Friends of PHP repository</a> to ensure that <strong>your</strong> project doesn\'t depend on any known-vulnerable packages.</p>\r\n<pre><code class=\"hljs ruby\">composer <span class=\"hljs-keyword\">require</span> roave/security-<span class=\"hljs-symbol\">advisories:</span>dev-master    \r\n</code></pre>\r\n<p>Alternatively, you can <a href=\"https://github.com/FriendsOfPHP/security-advisories#checking-for-vulnerabilities\">upload your <code>composer.lock</code> file to Sensio Labs</a> as part of a routine automated vulnerability assessment workflow to alert you to any outdated packages.</p>\r\n<h3 id=\"vimeo-psalm\">vimeo/psalm</h3>\r\n<p><a href=\"https://github.com/vimeo/psalm\">Psalm</a> is a static analysis tool that helps identify possible bugs in your code. Although there are other good static analysis tools (such as <a href=\"https://github.com/phan/phan\">Phan</a> and <a href=\"https://github.com/phpstan/phpstan\">PHPStan</a> which are both excellent), if you ever find yourself needing to support PHP 5, Psalm is the go-to static analysis tool for PHP 5.4+.</p>\r\n<p>Using Psalm is relatively easy:</p>\r\n<pre><code class=\"bash hljs\"><span class=\"hljs-comment\"># Version 1 doesn\'t exist yet, but it will one day:</span>\r\ncomposer require --dev vimeo/psalm:^<span class=\"hljs-number\">0</span>\r\n\r\n<span class=\"hljs-comment\"># Only do this once:</span>\r\nvendor/bin/psalm --init\r\n\r\n<span class=\"hljs-comment\"># Do this as often as you need:</span>\r\nvendor/bin/psalm</code></pre>\r\n<p>If you\'re running this on an existing codebase for the first time, you might see a lot of red. Unless you\'re building an application as large as WordPress, it\'s unlikely that the effort required to get the tests to all pass will qualify as Herculean.</p>\r\n<p>Regardless of which static analysis tool you use, we recommend you bake it into your Continuous Integration workflow (if applicable) so that it is run after every code change.</p>\r\n<h1 id=\"browser-security\">HTTPS and Browser Security</h1>\r\n<blockquote>\r\n<p>In short: HTTPS, <a href=\"https://www.ssllabs.com\">which should be tested</a>, and <a href=\"https://securityheaders.io\">security headers</a>.</p>\r\n</blockquote>\r\n<p>In 2018, it will no longer be acceptable for websites to be accessible over unsecured HTTP. Fortunately, it has been possible to get TLS certificates for free, and automatically renew them, thanks to the ACME protocol and the <a href=\"https://letsencrypt.org/\">Let\'s Encrypt certificate authority</a>.</p>\r\n<p>Integrating ACME into your webserver is a piece of cake.</p>\r\n<ul>\r\n<li><a href=\"https://caddyserver.com\">Caddy</a>: Baked-in automatically.</li>\r\n<li><a href=\"https://letsencrypt.org/2017/10/17/acme-support-in-apache-httpd.html\">Apache</a>: Soon to be available as mod_md. Until then, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-16-04\">there are high-quality tutorials</a> available on the Internet.</li>\r\n<li><a href=\"https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/\">Nginx</a>: Relatively straightforward.</li>\r\n</ul>\r\n<p>You might be thinking, \"Okay, I have a TLS certificate. Now I have to spend hours fiddling with the configuration before it\'s secure and fast.\"</p>\r\n<p><strong>Nope!</strong> <a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\">Mozilla has your back</a>. You can use the configuration generator to build the <a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">recommended ciphersuites</a> based on your intended audience.</p>\r\n<p><em>HTTPS (HTTP over TLS) is <a href=\"https://stackoverflow.com/a/2336738/2224584\">absolutely non-negotiable</a></em> if you want your website to be secure. Using HTTPS instantly eliminates several classes of attack on your users (man-in-the-middle content injection, wiretapping, replay attacks, and several forms of session manipulation that would otherwise allow user impersonation).</p>\r\n<h2 id=\"security-headers\">Security Headers</h2>\r\n<p>However, while slapping HTTPS onto your server does offer numerous security and performance benefits for your users, you can go a step further by utilizing other browser security features. Most of these involve sending an HTTP response header along with your content.</p>\r\n<ul>\r\n<li><code>Content-Security-Policy</code>\r\n<ul>\r\n<li>You want this header because it gives you fine-grained control over the internal and external resources allowed to be loaded by the browser, which provides a potent layer of defense against cross-site scripting vulnerabilities.</li>\r\n<li>See <a href=\"https://github.com/paragonie/csp-builder\">CSP-Builder</a> for a quick and easy way to deploy/manage Content Security Policies.</li>\r\n<li>For a more in-depth analysis, this <a href=\"https://scotthelme.co.uk/content-security-policy-an-introduction/\">introduction to Content-Security-Policy headers</a> by Scott Helme is a great starting point.</li>\r\n</ul>\r\n</li>\r\n<li><code>Expect-CT</code>\r\n<ul>\r\n<li>You want this header because it adds a layer of protection against rogue/compromised certificate authorities by forcing bad actors to publish evidence of their mis-issued certificates to a publicly verifiable, append-only data structure. <a href=\"https://scotthelme.co.uk/a-new-security-header-expect-ct/\">Learn more about <code>Expect-CT</code></a>.</li>\r\n<li>Set it to <code>enforce,max-age=30</code> at first, and increase the <code>max-age</code> as you gain more confidence that this header will not cause service disruptions.</li>\r\n</ul>\r\n</li>\r\n<li><code>Referrer-Policy</code>\r\n<ul>\r\n<li>You want this header because it allows you to control whether or not you leak information about your users\' behavior to third parties.</li>\r\n<li>Once again, <a href=\"https://scotthelme.co.uk/a-new-security-header-referrer-policy/\">Scott Helme offers an excellent deep dive into <code>Referrer-Policy</code></a> headers.</li>\r\n<li>Set it to <code>same-origin</code> or <code>no-referrer</code> unless you have a reason to allow a more permissive setting.</li>\r\n</ul>\r\n</li>\r\n<li><code>Strict-Transport-Security</code>\r\n<ul>\r\n<li>You want this header because it tells browsers to force all future requests to the same origin over HTTPS rather than insecure HTTP.</li>\r\n<li>Set it to <code>max-age=30</code> when first deploying, then increase this value to some large value (e.g. <code>31536000</code>) when you\'re confident that nothing will break.</li>\r\n</ul>\r\n</li>\r\n<li><code>X-Content-Type-Options</code>\r\n<ul>\r\n<li>You want this header because MIME type confusion can lead to unpredictable results, including weird edge cases that allow XSS vulnerabilities. This is best accompanied by a standard <code>Content-Type</code> header.</li>\r\n<li>Set to <code>nosniff</code> unless you need the default behavior (e.g. for a file download).</li>\r\n</ul>\r\n</li>\r\n<li><code>X-Frame-Options</code>\r\n<ul>\r\n<li>You want this header because it allows you to prevent <strong>clickjacking</strong>.</li>\r\n<li>Set to <code>DENY</code> (or <code>SAMEORIGIN</code>, but only if you use <code>&lt;frame&gt;</code> elements)</li>\r\n</ul>\r\n</li>\r\n<li><code>X-XSS-Protection</code>\r\n<ul>\r\n<li>You want this header because it enables some browser anti-XSS features that are not enabled by default.</li>\r\n<li>Set to <code>1; mode=block</code></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>In a similar vein, if you\'re using PHP\'s built-in session management features (which are recommended), you probably want to invoke <code>session_start()</code> like so:</p>\r\n<pre><code class=\"php hljs\">session_start([\r\n    <span class=\"hljs-string\">\'cookie_httponly\'</span> =&gt; <span class=\"hljs-keyword\">true</span>,\r\n    <span class=\"hljs-string\">\'cookie_secure\'</span> =&gt; <span class=\"hljs-keyword\">true</span>\r\n]);</code></pre>\r\n<p>This forces your app to use the HTTP-Only and Secure flags when sending the session identifier cookie, which prevents a successful XSS attack from stealing users\' cookies and forces them to only be sent over HTTPS, respectively. We\'ve previously covered <a href=\"https://paragonie.com/blog/2015/04/fast-track-safe-and-secure-php-sessions\">secure PHP sessions</a> in a 2015 blog post.</p>\r\n<h2 id=\"subresource-integrity\">Subresource Integrity</h2>\r\n<p>At some point in the future, you will likely work on a project that uses a CDN to offload common Javascript/CSS frameworks and libraries into a central location.</p>\r\n<p>It should come as no surprise that the security engineers have already foreseen the obvious pitfall: If a lot of websites use a CDN to serve some of their content, then hacking the CDN and replacing the contents will allow you to inject the code of your choice onto thousands (if not millions) of websites.</p>\r\n<p><strong>Enter <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\">subresource integrity</a>.</strong></p>\r\n<p>Subresource integrity (SRI) allows you to pin a hash of the contents of the file you expect the CDN to serve. SRI as currently implemented only allows the use of secure cryptographic hash functions, which means that it\'s infeasible for an attacker to generate a malicious version of the same resources that produce the same hash as the original file.</p>\r\n<p>Real world example: <a href=\"https://v4-alpha.getbootstrap.com/\">Bootstrap v4-alpha uses SRI in their CDN example snippet</a>.</p>\r\n<pre><code class=\"html hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">link</span>\r\n    <span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-value\">\"stylesheet\"</span>\r\n    <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\"</span>\r\n    <span class=\"hljs-attribute\">integrity</span>=<span class=\"hljs-value\">\"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ\"</span>\r\n    <span class=\"hljs-attribute\">crossorigin</span>=<span class=\"hljs-value\">\"anonymous\"</span>\r\n/&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span>\r\n    <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js\"</span>\r\n    <span class=\"hljs-attribute\">integrity</span>=<span class=\"hljs-value\">\"sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn\"</span>\r\n    <span class=\"hljs-attribute\">crossorigin</span>=<span class=\"hljs-value\">\"anonymous\"</span>\r\n&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span></code></pre>\r\n<h2 id=\"rel-attribute\">Document Relationships</h2>\r\n<p>Web developers often set the <code>target</code> attribute on hyperlinks (e.g. <code>target=\"_blank\"</code> to open the link in a new window). However, if you aren\'t also passing the <code>rel=\"noopener\"</code> tag, you might <a href=\"https://mathiasbynens.github.io/rel-noopener/\">allow the target page to take control of the original page</a>.</p>\r\n<h4>Don\'t Do This</h4>\r\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"http://example.com\"</span> <span class=\"hljs-attribute\">target</span>=<span class=\"hljs-value\">\"_blank\"</span>&gt;</span>Click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\r\n</code></pre>\r\n<p>This lets <code>example.com</code> take control of the current web page.</p>\r\n<h4>Do This Instead</h4>\r\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"https://example.com\"</span> <span class=\"hljs-attribute\">target</span>=<span class=\"hljs-value\">\"_blank\"</span> <span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-value\">\"noopener noreferrer\"</span>&gt;</span>Click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\r\n</code></pre>\r\n<p>This opens <code>example.com</code> in a new window, but doesn\'t surrender control over the current window to a possibly malicious third party.</p>\r\n<p><a href=\"https://www.jitbit.com/alexblog/256-targetblank---the-most-underestimated-vulnerability-ever\">Further reading</a>.</p>\r\n<h1 id=\"secure-php\">Developing Secure PHP Software</h1>\r\n<p>If application security is a new topic for you, start with <a href=\"https://paragonie.com/blog/2015/08/gentle-introduction-application-security\"><em>A Gentle Introduction to Application Security</em></a>.</p>\r\n<p>Most security professionals point developers to resources such as the <a href=\"https://www.owasp.org/index.php/Top_10_2017-Top_10\">OWASP Top 10</a> right out of the gate.</p>\r\n<p>However, most of the common vulnerabilities can be expressed as specific instances of the same rough high-level security problem (code/data not adequately separated, unsound logic, insecure operating environment, or broken cryptography protocols).</p>\r\n<p>Our hypothesis is that teaching security neophytes a simpler, more fundamental understanding of these security problems and how to solve them will lead to better security engineering in the long run.</p>\r\n<p>Thus, <a href=\"https://paragonie.com/blog/2017/04/checklist-driven-security-considered-harmful\">we avoid recommending Top 10 or Top 25 security checklists</a>.</p>\r\n<h2 id=\"secure-php-databases\">Database Interaction</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide\">Preventing SQL Injection in PHP Applications</a></p>\r\n</blockquote>\r\n<p>If you\'re writing SQL queries yourself, make sure that you\'re using <strong>prepared statements</strong>, and that any information provided by the network or filesystem is passed as a parameter rather than concatenated into the query string. Furthermore, make sure you\'re <a href=\"https://stackoverflow.com/a/12202218\">not using <em>emulated</em> prepared statements</a>.</p>\r\n<p>For best results, use <a href=\"https://github.com/paragonie/easydb\">EasyDB</a>.</p>\r\n<p><strong><em>DON\'T DO THIS:</em></strong></p>\r\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/* Insecure code: */</span>\r\n<span class=\"hljs-variable\">$query</span> = <span class=\"hljs-variable\">$pdo</span>-&gt;query(<span class=\"hljs-string\">\"SELECT * FROM users WHERE username = \'\"</span> . <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\'username\'</span>] . <span class=\"hljs-string\">\"\'\"</span>);\r\n</code></pre>\r\n<p>Do this instead:</p>\r\n<pre><code class=\"hljs php\"><span class=\"hljs-comment\">/* Secure against SQL injection: */</span>\r\n<span class=\"hljs-variable\">$results</span> = <span class=\"hljs-variable\">$easydb</span>-&gt;row(<span class=\"hljs-string\">\"SELECT * FROM users WHERE username = ?\"</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\'username\'</span>]);\r\n</code></pre>\r\n<p>There are other database abstraction layers that offer equivalent security (EasyDB actually uses PDO behind-the-scenes, but goes out of its way to disable prepared statement emulation in favor of actual prepared statements to prevent security foot-guns). As long as user input cannot influence the structure of queries, you\'re safe. (This includes stored procedures.)</p>\r\n<h2 id=\"secure-php-files\">File Uploads</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2015/10/how-securely-allow-users-upload-files\">How to Securely Allow Users to Upload Files</a></p>\r\n</blockquote>\r\n<p>Accepting file uploads is a risky proposition, but it\'s possible to do this safely, provided some basic precautions are taken. Namely: Preventing the direct access of uploaded files in a way that could accidentally allow them to be executed or interpreted.</p>\r\n<p><strong>Uploaded files should be read-only or read-write, never executable.</strong></p>\r\n<p>If your website\'s document root is <code>/var/www/example.com</code>, you do not want to store your files in <code>/var/www/example.com/uploaded_files</code>.</p>\r\n<p>Instead, you want files to be stored in a separate directory that is not directly accessible (e.g. <code>/var/www/example.com-uploaded/</code>), lest they accidentally be executed as a server-side script and open the door to remote code execution.</p>\r\n<p>A cleaner solution is to move your document root down one level (i.e. to <code>/var/www/example.com/public</code>).</p>\r\n<p>The other problem with file uploads is, well, <em>downloading</em> them safely.</p>\r\n<ul>\r\n<li>SVG images, when accessed directly, will execute JavaScript code in the user\'s browser. This is true <a href=\"https://github.com/w3c/svgwg/issues/266\">despite the misleading <code>image/</code> prefix in the MIME type</a>.</li>\r\n<li>MIME type sniffing can lead to type confusion attacks, as discussed previously. See <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#security-headers\"><code>X-Content-Type-Options</code></a>.</li>\r\n<li>If you forego the previous advice about how to store uploaded files safely, an attacker that manages to upload a <code>.php</code> or <code>.phtml</code> file may be able to execute arbitrary code by accessing the file directly in their browser, thereby giving them complete control over the server. Play it safe.</li>\r\n</ul>\r\n<h2 id=\"secure-php-xss\">Cross-Site Scripting (XSS)</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know\">Everything You Need to Know About Preventing Cross-Site Scripting Vulnerabilities in PHP</a></p>\r\n</blockquote>\r\n<p>In a perfect world, XSS would be as easy to prevent as SQL injection. We would have a simple, easy-to-use API for separating the structure of a document from the data that populates it.</p>\r\n<p>Unfortunately, the real world experience of most web developers involves generating a long blob of HTML and sending it in an HTTP response. This isn\'t a PHP-exclusive reality, it\'s simply how web development is done.</p>\r\n<p>Mitigating XSS vulnerabilities is not a lost cause. However, everything in <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#browser-security\">the section on Browser Security</a> suddenly becomes very relevant. In short:</p>\r\n<ol>\r\n<li><strong>Always escape on <em>output</em>, never on <em>input</em>.</strong> If you store sanitized data in a database, and then a SQL injection vulnerability is found elsewhere, the attacker can totally bypass your XSS protection by polluting the trusted-to-be-sanitized record with malware.</li>\r\n<li>If your framework has a templating engine that offers automatic contextual filtering, use that. It becomes your framework\'s job to do it securely.</li>\r\n<li><code>echo htmlentities($string, ENT_QUOTES | ENT_HTML5, \'UTF-8\');</code> is a safe and effective way to stop all XSS attacks on a UTF-8 encoded web page, but doesn\'t allow any HTML.</li>\r\n<li>If your requirements allow you to use Markdown instead of HTML, <a href=\"https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know#avoid-html\">don\'t use HTML</a>.</li>\r\n<li>If you need to allow some HTML and aren\'t using a templating engine (see #1), use <a href=\"http://htmlpurifier.org\">HTML Purifier</a>. HTML Purifier is not appropriate for escaping into an HTML attribute context.</li>\r\n<li>For user-provided URLs, you additionally want to <a href=\"https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know#url-escaping\">only allow <code>http:</code> and <code>https:</code> schemes</a>; never <code>javascript:</code>. Furthermore, URL encode any user input.</li>\r\n</ol>\r\n<h2 id=\"secure-php-csrf\">Cross-Site Request Forgery (CSRF)</h2>\r\n<p>Cross-Site Request Forgery is a sort of confused deputy attack, whereby you can trick a user\'s browser into performing a malicious HTTP request on the attacker\'s behalf, with the user\'s elevated privileges.</p>\r\n<p>This is trivially solvable in the general case with two easy steps:</p>\r\n<ol>\r\n<li>Use HTTPS. <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#browser-security\">This is a prerequisite</a>. Without HTTPS, any defense you could hope to mount becomes brittle. However, HTTPS alone does not prevent CSRF.</li>\r\n<li>Add basic challenge-response authentication.\r\n<ul>\r\n<li>Add a hidden form attribute to every form.</li>\r\n<li>Populate with a cryptographically secure random value (called a token).</li>\r\n<li>Verify that the hidden form attribute was provided, and matches what you expect.</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<p>We wrote a library called <a href=\"https://github.com/paragonie/anti-csrf\">Anti-CSRF</a> that goes a step further:</p>\r\n<ul>\r\n<li>You can make every token usable only once, to prevent replay attacks.\r\n<ul>\r\n<li>Multiple tokens are stored in the backend.</li>\r\n<li>Tokens rotate once their capacity has been reached, oldest first.</li>\r\n</ul>\r\n</li>\r\n<li>Every token can be tied to a particular URI.\r\n<ul>\r\n<li>If one token leaks, it cannot be used in a different context.</li>\r\n</ul>\r\n</li>\r\n<li>Tokens can be optionally bound to a particular IP address.</li>\r\n<li>Since v2.1, tokens can be reusable (i.e. for AJAX calls).</li>\r\n</ul>\r\n<p>If you\'re not using a framework that takes care of CSRF vulnerabilities for you, give Anti-CSRF a spin.</p>\r\n<p>In the near future, <a href=\"https://www.sjoerdlangkemper.nl/2016/04/14/preventing-csrf-with-samesite-cookie-attribute/\">SameSite cookies will allow us to kill CSRF attacks</a> with much lower complexity.</p>\r\n<h2 id=\"secure-php-xml\">XML Attacks (XXE, XPath Injection)</h2>\r\n<p>There are two major vulnerabilities that rear their ugly heads in applications that do a lot of XML processing:</p>\r\n<ol>\r\n<li>XML External Entities (XXE)</li>\r\n<li>XPath Injection</li>\r\n</ol>\r\n<p>XXE attacks can be used as a launchpad for local/remote file inclusion exploits, <a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\">among other things</a>.</p>\r\n<p>An earlier version of Google Docs famously fell to XXE, but they\'re largely unheard of outside of business applications that do a lot of heavy XML work.</p>\r\n<p>The main mitigation against XXE attacks is as follows:</p>\r\n<pre><code class=\"php hljs\">libxml_disable_entity_loader(<span class=\"hljs-keyword\">true</span>);</code></pre>\r\n<p><a href=\"https://www.owasp.org/index.php/XPATH_Injection\">XPath Injection</a> is very similar to SQL Injection, except for XML documents.</p>\r\n<p>Fortunately, situations where you pass user input into an XPath query are quite rare in the PHP ecosystem.</p>\r\n<p>Unfortunately, this also means that the best mitigation available (pre-compiled and parametrized XPath queries) is not present in the PHP ecosystem.</p>\r\n<p>Your best bet is to use a whitelist of allowed characters on any data that touches the XPath query.</p>\r\n<pre><code class=\"php hljs\"><span class=\"hljs-preprocessor\">&lt;?php</span>\r\n<span class=\"hljs-keyword\">declare</span>(strict_types=<span class=\"hljs-number\">1</span>);\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SafeXPathEscaper</span>\r\n</span>{\r\n    <span class=\"hljs-comment\">/**\r\n     *<span class=\"hljs-phpdoc\"> @param</span> string $input\r\n     *<span class=\"hljs-phpdoc\"> @return</span> string\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">allowAlphaNumeric</span><span class=\"hljs-params\">(string <span class=\"hljs-variable\">$input</span>)</span>: <span class=\"hljs-title\">string</span>\r\n    </span>{\r\n        <span class=\"hljs-keyword\">return</span> \\preg_replace(<span class=\"hljs-string\">\'#[^A-Za-z0-9]#\'</span>, <span class=\"hljs-string\">\'\'</span>, <span class=\"hljs-variable\">$input</span>);\r\n    }\r\n    \r\n    <span class=\"hljs-comment\">/**\r\n     *<span class=\"hljs-phpdoc\"> @param</span> string $input\r\n     *<span class=\"hljs-phpdoc\"> @return</span> string\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">allowNumeric</span><span class=\"hljs-params\">(string <span class=\"hljs-variable\">$input</span>)</span>: <span class=\"hljs-title\">string</span>\r\n    </span>{\r\n        <span class=\"hljs-keyword\">return</span> \\preg_replace(<span class=\"hljs-string\">\'#[^0-9]#\'</span>, <span class=\"hljs-string\">\'\'</span>, <span class=\"hljs-variable\">$input</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Usage:</span>\r\n<span class=\"hljs-variable\">$selected</span> = <span class=\"hljs-variable\">$xml</span>-&gt;xpath(\r\n    <span class=\"hljs-string\">\"/user/username/\"</span> . SafeXPathEscaper::allowAlphaNumeric(\r\n        <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\'username\'</span>]\r\n    )\r\n);</code></pre>\r\n<p>Whitelists are safer than blacklists.</p>\r\n<h2 id=\"secure-php-serialization\">Deserialization and PHP Object Injection</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2016/04/securely-implementing-de-serialization-in-php\">Securely Implementing (De)Serialization in PHP</a></p>\r\n</blockquote>\r\n<p>If you pass untrusted data to <code>unserialize()</code>, you\'re generally asking for one of two outcomes:</p>\r\n<ol>\r\n<li>PHP Object Injection, which can be used to launch a POP chain and trigger other vulnerabilities from misused objects.</li>\r\n<li>Memory corruption in the PHP interpreter itself.</li>\r\n</ol>\r\n<p>Most developers prefer to use JSON serialization instead, which is a marked improvement to their software\'s security posture, but keep in mind that <a href=\"http://lukasmartinelli.ch/web/2014/11/17/php-dos-attack-revisited.html\"><code>json_decode()</code> is vulnerable to hash-collision denial-of-service (Hash-DoS)</a> attacks. Unfortunately, the total fix to PHP\'s Hash-DOS woes <a href=\"https://bugs.php.net/bug.php?id=70644\">has yet to be resolved</a>.</p>\r\n<p>Migrating from djb33 to Siphash with the highest bit of the hash output set to 1 for string input and set to 0 for integer inputs, with a per-request key provided by a CSPRNG, would totally solve these attacks.</p>\r\n<p>Unfortunately, the PHP team isn\'t quite ready to let go of the performance gains they\'ve been racking up with the PHP 7 series, so it\'s a hard sell to convince them to drop djb33 (which is very fast, but not secure) in favor of SipHash (which is also fast, but not as fast as djb33, but much more secure). A significant performance hit could even discourage adoption of future versions which would in turn be bad for security.</p>\r\n<p>The best thing to do, therefore, is:</p>\r\n<ul>\r\n<li>Use JSON, because it\'s safer than <code>unserialize()</code>.</li>\r\n<li>Where you can, ensure inputs are authenticated before deserializing them.\r\n<ul>\r\n<li>For data you provide to the end user, use <code>sodium_crypto_auth()</code> and <code>sodium_crypto_auth_verify()</code> with a secret key known only to the webserver.</li>\r\n<li>For data provided by other third parties, arrange for them to sign their JSON messages with <code>sodium_crypto_sign()</code> and then verify them with <code>sodium_crypto_sign_open()</code> and the third party\'s public key.\r\n<ul>\r\n<li>You can also used the detached signing API if you need to hex- or base64- encode the signatures for transport.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n</li>\r\n<li>Where you cannot authenticate JSON strings, employ strict rate-limiting and block IP addresses to mitigate against repeat offenders.</li>\r\n</ul>\r\n<h2 id=\"secure-php-passwords\">Password Hashing</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016\">How to Safely Store Your Users\' Passwords in 2016</a></p>\r\n</blockquote>\r\n<p>Secure password storage used to be a topic of heated debate, but these days it\'s rather trivial to implement, especially in PHP:</p>\r\n<pre><code class=\"php hljs\"><span class=\"hljs-variable\">$hash</span> = \\password_hash(<span class=\"hljs-variable\">$password</span>, PASSWORD_DEFAULT);\r\n\r\n<span class=\"hljs-keyword\">if</span> (\\password_verify(<span class=\"hljs-variable\">$password</span>, <span class=\"hljs-variable\">$hash</span>)) {\r\n    <span class=\"hljs-comment\">// Authenticated.</span>\r\n    <span class=\"hljs-keyword\">if</span> (\\password_needs_rehash(<span class=\"hljs-variable\">$hash</span>, PASSWORD_DEFAULT)) {\r\n        <span class=\"hljs-comment\">// Rehash, update database.</span>\r\n    }\r\n}</code></pre>\r\n<p>You don\'t even need to know what algorithm is being used in the background, because if you\'re using the latest version of PHP, you will also be using the current state-of-the-art and users\' passwords will be automatically upgraded as soon as a new default algorithm is available.</p>\r\n<p>Just whatever you do, <a href=\"https://paragonie.com/blog/2016/08/on-insecurity-popular-open-source-php-cms-platforms#wordpress-password-storage\">don\'t do what WordPress does</a>.</p>\r\n<p>If you\'re curious, however: From PHP 5.5 through 7.2, the default algorithm is bcrypt. In the future, it may switch to Argon2, the winner of the <a href=\"https://password-hashing.net\">Password Hashing Competition</a>.</p>\r\n<p>If you previously <em>weren\'t</em> using the <code>password_*</code> API and have legacy hashes that need to be migrated, <a href=\"https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016#legacy-hashes\">make sure you do it <em>this</em> way</a>. A lot of companies got this wrong; most famously, <a href=\"https://www.theregister.co.uk/2016/12/15/yahoos_password_hash/\">Yahoo</a>. More recently, implementing legacy hash upgrading incorrectly seems to have <a href=\"https://objective-see.com/blog/blog_0x24.html\">caused Apple\'s recent <code>iamroot</code> bug</a>.</p>\r\n<h2 id=\"secure-php-cryptography\">General-Purpose Cryptography</h2>\r\n<p>This is a subject we\'ve written about at length:</p>\r\n<ul>\r\n<li><a href=\"https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly\">Using Encryption and Authentication Correctly</a> (2015)</li>\r\n<li><strong>Recommended</strong>: <a href=\"https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide\">Choosing the Right Cryptography Library for your PHP Project: A Guide</a> (2015)</li>\r\n<li><strong>Recommended</strong>: <a href=\"https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded\">You Wouldn\'t Base64 a Password - Cryptography Decoded</a> (2015)</li>\r\n<li><a href=\"https://paragonie.com/blog/2017/02/cryptographically-secure-php-development\">Cryptographically Secure PHP Development</a> (2017)</li>\r\n<li><strong>Recommended</strong>: <a href=\"https://paragonie.com/blog/2017/06/libsodium-quick-reference-quick-comparison-similar-functions-and-which-one-use\">Libsodium Quick Reference: Similarly-Named Functions and Their Use-Cases</a> (2017)</li>\r\n</ul>\r\n<p>Generally, you always want to use the Sodium cryptography library (libsodium) for application-layer cryptography. If you need to support versions of PHP earlier than 7.2 (as early as 5.2.4), you can use <a href=\"https://github.com/paragonie/sodium_compat\">sodium_compat</a> and basically pretend your users are on 7.2 as well.</p>\r\n<p>In specific instances, you may need a different library because of rigid algorithm choices and interoperability. When in doubt, consult a cryptographer about the cipher choices and a cryptography engineer about whether or not the implementation is secure. (This is <a href=\"https://paragonie.com/services\">one of the services we provide</a>.)</p>\r\n<p>If you\'re working with ciphers/modes directly, <a href=\"https://gist.github.com/atoponce/07d8d4c833873be2f68c34f9afc5a78a\">consult this brief guide on cryptography best practices</a>.</p>\r\n<h2 id=\"secure-random-numbers\">Randomness</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2015/07/how-safely-generate-random-strings-and-integers-in-php\">How to Securely Generate Random Strings and Integers in PHP</a></p>\r\n</blockquote>\r\n<p>If you need random numbers, use <a href=\"http://secure.php.net/random_int\">random_int()</a>. If you need random byte strings, use <a href=\"http://secure.php.net/random_int\">random_bytes()</a>. <strong>Don\'t use <code>mt_rand()</code>, <code>rand()</code>, or <code>uniqid()</code> for this purpose.</strong></p>\r\n<p>If you need to generate pseudorandom numbers from a secret seed, instead of <code>srand()</code> or <code>mt_srand()</code>, check out <a href=\"https://github.com/paragonie/seedspring\">SeedSpring</a> instead.</p>\r\n<pre><code class=\"php hljs\"><span class=\"hljs-preprocessor\">&lt;?php</span>\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">ParagonIE</span>\\<span class=\"hljs-title\">SeedSpring</span>\\<span class=\"hljs-title\">SeedSpring</span>;\r\n\r\n<span class=\"hljs-variable\">$seed</span> = random_bytes(<span class=\"hljs-number\">16</span>);\r\n<span class=\"hljs-variable\">$rng</span> = <span class=\"hljs-keyword\">new</span> SeedSpring(<span class=\"hljs-variable\">$seed</span>);\r\n\r\n<span class=\"hljs-variable\">$data</span> = <span class=\"hljs-variable\">$rng</span>-&gt;getBytes(<span class=\"hljs-number\">1024</span>);\r\n<span class=\"hljs-variable\">$int</span> = <span class=\"hljs-variable\">$rng</span>-&gt;getInt(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);</code></pre>\r\n<h2 id=\"secure-server-side-https\">Server-Side HTTPS Requests</h2>\r\n<blockquote>\r\n<p>In brief: Make sure TLS certificate validation is not disabled.</p>\r\n</blockquote>\r\n<p>Feel free to use any PSR-7 compatible HTTP client that you\'re already familiar with. We like Guzzle. Some people like to work with cURL directly.</p>\r\n<p>Whatever you end up using, make sure you <a href=\"https://paragonie.com/blog/2017/10/certainty-automated-cacert-pem-management-for-php-software\">use Certainty to ensure you can always have the most up-to-date CACert bundle</a>, which in turn allows you to enable the strictest TLS certificate validation settings and secure your server\'s outbound HTTPS requests.</p>\r\n<p>Installing Certainty is easy:</p>\r\n<pre><code class=\"bash hljs\">composer require paragonie/certainty:^<span class=\"hljs-number\">1</span></code></pre>\r\n<p>Using Certainty is also easy:</p>\r\n<pre><code class=\"php hljs\"><span class=\"hljs-preprocessor\">&lt;?php</span>\r\n<span class=\"hljs-keyword\">use</span> <span class=\"hljs-title\">ParagonIE</span>\\<span class=\"hljs-title\">Certainty</span>\\<span class=\"hljs-title\">RemoteFetch</span>;\r\n\r\n<span class=\"hljs-variable\">$latestCACertBundle</span> = (<span class=\"hljs-keyword\">new</span> RemoteFetch())-&gt;getLatestBundle();\r\n\r\n<span class=\"hljs-comment\"># cURL users:</span>\r\n    <span class=\"hljs-variable\">$ch</span> = curl_init();\r\n    curl_setopt(<span class=\"hljs-variable\">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class=\"hljs-number\">2</span>);\r\n    curl_setopt(<span class=\"hljs-variable\">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class=\"hljs-keyword\">true</span>);\r\n    curl_setopt(<span class=\"hljs-variable\">$ch</span>, CURLOPT_CAINFO, <span class=\"hljs-variable\">$latestCACertBundle</span>-&gt;getFilePath());\r\n\r\n<span class=\"hljs-comment\"># Guzzle users:</span>\r\n    <span class=\"hljs-comment\">/**<span class=\"hljs-phpdoc\"> @var</span> \\GuzzleHttp\\Client $http */</span>\r\n    <span class=\"hljs-variable\">$repsonse</span> = <span class=\"hljs-variable\">$http</span>-&gt;get(\r\n        <span class=\"hljs-string\">\'https://example.com\'</span>, \r\n        [\r\n            <span class=\"hljs-string\">\'verify\'</span> =&gt; <span class=\"hljs-variable\">$latestCACertBundle</span>-&gt;getFilePath()\r\n        ]\r\n    );</code></pre>\r\n<p>This will protect you from man-in-the-middle attacks between your webserver and any third-party APIs you integrate with.</p>\r\n<h4>Do We <em>Really</em> Need Certainty?</h4>\r\n<p>Certainty isn\'t <em>strictly</em> necessary to protect your systems. Its absence is not a vulnerability.</p>\r\n<p>But without Certainty, open source software has to guess where the Operating System\'s CACert bundle lives, and if it guesses wrong, it often fails hard and causes usability problems.</p>\r\n<p>Historically, this incentivized a lot of developers to just disable certificate validation so their code \"just works\" without realizing how vulnerable they just made their application to active attacks.</p>\r\n<p>Certainty removes that incentive by making CACert bundles up-to-date and in a predictable location. Certainty also provides a lot of tooling for enterprises that wish to <a href=\"https://github.com/paragonie/certainty/blob/master/docs/features/LocalCACertBuilder.md\">run their own in-house CA</a>.</p>\r\n<h4>Who Disables Certificate Validation?</h4>\r\n<p>Plugin/extension developers for popular content management systems (WordPress, Magento, etc.) do! It\'s a huge problem that we\'re trying to solve at an ecosystem level. It\'s not isolated to any particular given CMS, you\'ll find plugins/etc. for all of them that are insecure this way.</p>\r\n<p>If you\'re using such a CMS, search your plugins for <code>CURLOPT_SSL_VERIFYPEER</code> and <code>CURLOPT_SSL_VERIFYHOST</code> and you\'ll likely find several that set these values to <code>FALSE</code>.</p>\r\n<h2 id=\"things-to-avoid\">Things To Avoid</h2>\r\n<p><a href=\"https://paragonie.com/blog/2015/05/if-you-re-typing-word-mcrypt-into-your-code-you-re-doing-it-wrong\">Don\'t use mcrypt</a>, a cryptography library that hasn\'t been developed in over a decade. If you\'re following <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#php-versions\">our PHP version recommendation</a>, this should be an easy pitfall to avoid, since mcrypt is not provided with PHP 7.2 and newer.</p>\r\n<p><a href=\"https://paragonie.com/blog/2017/01/configuration-driven-php-security-advice-considered-harmful\">Configuration-driven security advice</a> should be mostly disregarded. If you\'re reading a guide to PHP security and they tell you to change a php.ini setting rather than writing better code, you\'re probably reading very outdated advice. Close the window and move onto something that doesn\'t bloviate about <code>register_globals</code>.</p>\r\n<p><a href=\"https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid\">Don\'t use JOSE (JWT, JWS, JWE)</a>, a suite of Internet standards that codify a series of error-prone cryptographic designs that for some reason attracts a lot of evangelists in spite of the foot-bullets written into the standards.</p>\r\n<p><a href=\"https://paragonie.com/blog/2015/09/comprehensive-guide-url-parameter-encryption-in-php\">Encrypting URL parameters</a> is an anti-pattern that companies often employ to obfuscate metadata (e.g. how many users do we have?). It carries a high risk of implementation error while creating a false sense of security. We propose a safer alternative in the linked article.</p>\r\n<p><a href=\"https://paragonie.com/blog/2016/09/untangling-forget-me-knot-secure-account-recovery-made-simple\">Don\'t implement \"I forgot my password\"</a> features unless you absolutely must. To not mince words: <strong>Password reset features are a backdoor.</strong> There are ways to implement them that are secure against a reasonable threat model, but high-risk users should be given the opportunity to opt out of it entirely.</p>\r\n<p><a href=\"https://paragonie.com/blog/2016/12/everything-you-know-about-public-key-encryption-in-php-is-wrong\">Avoid using RSA if you can help it</a>. Use libsodium instead. If you must use RSA, make sure you specify OAEP padding.</p>\r\n<pre><code class=\"php hljs\"><span class=\"hljs-preprocessor\">&lt;?php</span>\r\n\r\nopenssl_private_decrypt(\r\n    <span class=\"hljs-variable\">$ciphertext</span>,\r\n    <span class=\"hljs-variable\">$decrypted</span>, <span class=\"hljs-comment\">// Plaintext gets written to this variable upon success,</span>\r\n    <span class=\"hljs-variable\">$privateKey</span>,\r\n    OPENSSL_PKCS1_OAEP_PADDING <span class=\"hljs-comment\">// Important: DO NOT OMIT THIS!</span>\r\n);\r\n</code></pre>\r\n<p>If you\'re forced to use PKCS#1 v1.5 padding, whatever you\'re integrating with is almost certainly vulnerable to <a href=\"https://robotattack.org\">ROBOT</a>, so report it to the appropriate vendor (or US-CERT) as a vulnerability allowing plaintext disclosure and signature forgery.</p>\r\n<h1 id=\"special-security\">Specialized Use-Cases</h1>\r\n<p>Now that you have a grasp on the basics of building secure PHP applications in 2018 and beyond, let\'s examine some of the more specialized use cases.</p>\r\n<h2 id=\"searchable-encryption\">Searchable Encryption</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql\">Building Searchable Encrypted Databases with PHP and SQL</a></p>\r\n</blockquote>\r\n<p>Searchable encrypted databases are desirable, but widely considered nontrivial to implement. The blog post linked above attempts to walk the reader through the development of our solution incremenetally, but in essence:</p>\r\n<ol>\r\n<li>Design your architecture so that a database compromise doesn\'t give attackers access to your cryptography keys.</li>\r\n<li>Encrypt the data under one secret key.</li>\r\n<li>Create multiple indices (with their own distinct secret keys), based on either HMAC or a secure KDF with a static salt (e.g. Argon2).</li>\r\n<li>Optional: Truncate the output of step 3, use it as a Bloom filter.</li>\r\n<li>Use the output of step 3 or 4 in your SELECT queries.</li>\r\n<li>Decrypt the results.</li>\r\n</ol>\r\n<p>At any step in the process, you can make different trade-offs based on what makes sense for your use case.</p>\r\n<h2 id=\"split-tokens\">Token-based Authentication without Side-Channels</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2017/02/split-tokens-token-based-authentication-protocols-without-side-channels\">Split Tokens: Token-Based Authentication Protocols without Side-Channels</a></p>\r\n</blockquote>\r\n<p>Speaking of databases (previous section), did you know that SELECT queries can theoretically be a source of timing information leaks?</p>\r\n<p>Simple mitigation:</p>\r\n<ol>\r\n<li>Cut your authentication tokens in half.</li>\r\n<li>Use one half in your SELECT queries.</li>\r\n<li>Validate the second half in constant-time.\r\n<ul>\r\n<li>You may optionally store a hash of the second half in the database instead of the half-token itself. This makes sense for tokens that will only be used once; i.e. password reset or \"remember me on this computer\" tokens.</li>\r\n</ul>\r\n</li>\r\n</ol>\r\n<p>Even if you can use timing leaks to steal half the token, the remainder will require a brute force attack to succeed.</p>\r\n<h2 id=\"secure-api-sapient\">Developing Secure APIs</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2017/06/hardening-your-php-powered-apis-with-sapient\">Hardening Your PHP-Powered APIs with Sapient</a></p>\r\n</blockquote>\r\n<p>We wrote <a href=\"https://github.com/paragonie/sapient\">SAPIENT</a>, the <strong>S</strong>ecure <strong>API</strong> <strong>EN</strong>gineering <strong>T</strong>oolkit, to make server-to-server authenticated messaging a no-brainer.</p>\r\n<p>Sapient allows you to encrypt and/or authenticate messages, using shared-key or public-key cryptography, in addition to the security that HTTPS provides.</p>\r\n<p>This allows you to authenticate API requests and responses using Ed25519 or encrypt messages to a target server that can only be decrypted by the recipient server\'s secret key, even if a man-in-the-middle attacker is present and armed with a rogue/compromised Certificate Authority.</p>\r\n<p>Because each HTTP message body is authenticated by secure cryptography, it can be used safely in lieu of stateful token juggling protocols (e.g. OAuth). However, when it comes to cryptography, one should always be sure their implementation is studied by experts before doing anything non-standard.</p>\r\n<p>All of the cryptography used by Sapient is provided by the Sodium cryptography library.</p>\r\n<p><strong>Further reading:</strong></p>\r\n<ul>\r\n<li><a href=\"https://github.com/paragonie/sapient/tree/master/docs\">Sapient Documentation</a></li>\r\n<li><a href=\"https://github.com/paragonie/sapient/blob/master/docs/Tutorial.md\">Sapient Tutorial</a></li>\r\n<li><a href=\"https://github.com/paragonie/sapient/blob/master/docs/Specification.md\">Sapient Specification</a></li>\r\n</ul>\r\n<p>Paragon Initiative Enterprises already uses Sapient in many of its products (including many open source software projects), and will continue to add software projects to the portfolio of Sapient users.</p>\r\n<h2 id=\"chronicle-security-event-logging\">Security Event Logging with Chronicle</h2>\r\n<blockquote>\r\n<p>In-depth: <a href=\"https://paragonie.com/blog/2017/07/chronicle-will-make-you-question-need-for-blockchain-technology\">Chronicle Will Make You Question the Need for Blockchain Technology</a></p>\r\n</blockquote>\r\n<p><a href=\"https://github.com/paragonie/chronicle\">Chronicle</a> is an append-only cryptographic ledger based on a hash-chain data structure that has a lot of the properties that attract companies to \"blockchain\" technology, without being overkill.</p>\r\n<p>Aside from the more creative use cases of an append-only cryptographic ledger, Chronicle shines brightly when integrated into an SIEM, because you can send security-critical events to a private Chronicle and they become immutable.</p>\r\n<p>If your Chronicle is set to cross-sign its summary hash onto other Chronicle instances, and/or if there are other instances configured to replicate your Chronicle\'s contents, it becomes extremely difficult for attackers to tamper with your security event logs.</p>\r\n<p>With Chronicle, you can get all the resilience that blockchains promise, without any of the rampant privacy, performance, or scalability problems.</p>\r\n<p>To publish data to a local Chronicle, you can use any <a href=\"https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-api-sapient\">Sapient-compatible API</a>, but the easiest solution is called <a href=\"https://github.com/paragonie/quill\">Quill</a>.</p>\r\n<h1 id=\"word-from-author\">A Word From the Author</h1>\r\n<p>An astute reader may notice that we reference a lot of our own work (both blog posts and open source software), but we <strong>don\'t</strong> <em>only</em> reference our own work.</p>\r\n<p>This was not accidental.</p>\r\n<p>Our company has been writing security libraries and participating in efforts to improve the security of the PHP ecosystem since we were founded in early 2015.</p>\r\n<p>We\'ve covered a lot of ground, and our security engineer (whose recent pushes for more secure cryptography in the PHP core just landed in PHP 7.2) is, self-admittedly, not very good at generating hype or interest in the work he has done. It is very likely that you haven\'t heard of even half of the tools or libraries we\'ve developed over the years. Sorry about that.</p>\r\n<p>However, we also can\'t be the forerunners in every direction, so where ever possible, we opted to link to the work of industry experts whom we believe are aligned more with the public good than petty selfishness. That is why much of the section dedicated to Browser Security references the work of <a href=\"https://scotthelme.co.uk/\">Scott Helme</a> and company, who have done great work in making these new security features accessible and understandable for developers.</p>\r\n<p>This guide is certainly not exhaustive. There are nearly as many ways to write insecure code as there are to write code in the first place. Security is a mindset more than it is a destination. With everything written above, and the resources that follow, we hope that this serves to equip developers the whole world over to write secure software in PHP from this day forward.</p>\r\n<h1 id=\"resources\">Resources</h1>\r\n<p>If you\'ve followed everything on this page, and you want more, you may be interested in <a href=\"https://github.com/paragonie/awesome-appsec\">our curated reading list for learning application security</a>.</p>\r\n<p>If you think you\'ve written adequately secure code and want us to critique it from a security engineer\'s perspective, this is actually a <a href=\"https://paragonie.com/services\">service we provide</a> to our clients.</p>\r\n<p>If you work for a company that is set to undergo compliance testing (PCI-DSS, ISO 27001, etc.), you may also want to <a href=\"https://paragonie.com/blog/2017/06/why-you-want-paragon-initiative-enterprises-audit-your-code\">hire our company to audit your source code</a>. Our process is way more developer-friendly than other security consultancies\'.</p>\r\n<p>What follows is a list of resources provided by the PHP and information security communities that help make the Internet more secure in their own way.</p>\r\n<ul>\r\n<li><a href=\"http://www.phptherightway.com\">PHP: The Right Way</a>, the de-facto guide to modern PHP development, online for free.</li>\r\n<li><a href=\"https://mozilla.github.io/server-side-tls/ssl-config-generator/\">Mozilla\'s SSL Config Generator</a></li>\r\n<li><a href=\"https://letsencrypt.org\">Let\'s Encrypt</a>, which is the Certificate Authority doing the most to create a more secure Internet by providing TLS certificates for free.</li>\r\n<li><a href=\"https://www.ssllabs.com/ssltest\">Qualys SSL Labs</a> provides a quick and easy test suite for TLS configuration. Virtually everyone uses this to troubleshoot their ciphersuites and certificate problems, for good reason: It does its job well.</li>\r\n<li><a href=\"https://securityheaders.io\">Security Headers</a> lets you verify how well your website fares in terms of utilizing browser security features to protect your users.</li>\r\n<li><a href=\"https://report-uri.com\">Report-URI</a> is a great free resource for kickstarting initiatives to implement security headers. They give you a Report-URI, which you can pass to your users\' browsers, and they will in turn complain to Report-URI if something breaks or someone finds an XSS attack vector. Report-URI aggregates these errors and allows you to better troubleshoot and triage these reports.</li>\r\n<li><a href=\"https://www.ripstech.com/php-security-calendar-2017\">The PHP Security Advent Calendar</a> by the team behind <a href=\"https://www.ripstech.com\">RIPSTech</a>.</li>\r\n<li><a href=\"https://snuffleupagus.readthedocs.io\">Snuffleupagus</a>, a security-oriented PHP module (and the spiritual successor to <a href=\"https://github.com/sektioneins/suhosin\">Suhosin</a>, which appears to be largely abandoned).</li>\r\n<li><a href=\"https://phpdelusions.net\">PHP Delusions</a>, a website dedicated to using PHP better. Much of the tone is very opinionated, but the author\'s dedication to technical accuracy and clarity makes it worth a read, especially for anyone who doesn\'t quite grok many of PDO\'s features.</li>\r\n<li><a href=\"https://haveibeenpwned.com\">Have I Been Pwned?</a> helps users discover if their data has been part of past data breaches.</li>\r\n</ul>', 1, '2018-02-02 05:37:42', '2018-02-03 12:48:15');

-- --------------------------------------------------------

--
-- Table structure for table `roles`
--

CREATE TABLE `roles` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `display_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `role_user`
--

CREATE TABLE `role_user` (
  `user_id` int(10) UNSIGNED NOT NULL,
  `role_id` int(10) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `level` tinyint(4) NOT NULL DEFAULT '0',
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `password`, `level`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'Mahmud Ibrahim', 'admin@admin.com', '$2y$10$4CT0jRFbyac7jnf43gr5e.Y8A9vBY5Nhy20b3KTySEZrrCTjUN7t.', 1, 'IFGVKn5NIhWAFcDH44Rn9Z5Vcw83tjihCbGEpXrvH88DOS8Bt4vXCZTQVDvQ', '2018-02-01 18:15:45', '2018-02-01 18:15:45'),
(3, 'moody', 'moody@moody.com', '$2y$10$FVus4efdbRclgONDrLdkIONC9/ZxR16ElSOhNHfOKP7.helpVfiLq', 0, 'wpEKhcoVoWiYrENjdADCACVDT4K463TONxvRAleiG3w5DSw5jH4pmrU8OJvv', '2018-02-03 07:12:46', '2018-02-03 07:12:46');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `contacts`
--
ALTER TABLE `contacts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Indexes for table `permissions`
--
ALTER TABLE `permissions`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `permissions_name_unique` (`name`);

--
-- Indexes for table `permission_role`
--
ALTER TABLE `permission_role`
  ADD PRIMARY KEY (`permission_id`,`role_id`),
  ADD KEY `permission_role_role_id_foreign` (`role_id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `roles`
--
ALTER TABLE `roles`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `roles_name_unique` (`name`);

--
-- Indexes for table `role_user`
--
ALTER TABLE `role_user`
  ADD PRIMARY KEY (`user_id`,`role_id`),
  ADD KEY `role_user_role_id_foreign` (`role_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `contacts`
--
ALTER TABLE `contacts`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `permissions`
--
ALTER TABLE `permissions`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `roles`
--
ALTER TABLE `roles`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `permission_role`
--
ALTER TABLE `permission_role`
  ADD CONSTRAINT `permission_role_permission_id_foreign` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `permission_role_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `role_user`
--
ALTER TABLE `role_user`
  ADD CONSTRAINT `role_user_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `role_user_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
